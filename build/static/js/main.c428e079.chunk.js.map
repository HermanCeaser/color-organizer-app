{"version":3,"sources":["Components/addColorFrom.jsx","Components/Star/star.jsx","Components/Star/starRating.jsx","Components/color/color.jsx","Components/color/colorList.jsx","App.js","serviceWorker.js","index.js"],"names":["AddColorForm","_title","_color","onNewColor","f","onSubmit","e","preventDefault","value","focus","className","ref","input","type","placeholder","required","Star","selected","onClick","StarRating","starsSelected","totalStars","onRate","Array","map","item","index","key","defaultProps","Color","title","color","rating","onRemove","id","style","backgroundColor","ColorList","colors","length","App","props","pRG","Math","random","rateColor","state","setState","removeColor","filter","addColor","bind","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c428e079.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst AddColorForm = ({onNewColor = f => f}) =>{\r\n\tlet _title, _color\t\r\n\tconst submit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tonNewColor(_title.value, _color.value)\t\r\n\t\t_title.value = ''\r\n\t\t_color.value='#000000'\r\n\t\t_title.focus()\r\n\t}\r\n\r\n\t\r\n\treturn(\r\n\t\t<form onSubmit={submit} >\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label> Color Title </label>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-md-6 col-sm-4 col-xs-6\">\r\n               \t\t\t<input ref={input => _title = input} type=\"text\" className=\"form-control\" placeholder=\"color title\" required/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-md-4 col-sm-4 col-xs-6\">\r\n\t\t\t\t\t\t<input ref={input =>_color = input} className=\"form-control\" type=\"color\"  required/><br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-md-2 col-sm-4 col-xs-12\">\r\n\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\"> Add </button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t              \t\r\n            </div>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t</form>\r\n\t)\r\n\t\r\n}\r\n\r\n\r\nexport default AddColorForm","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport './star.css'\r\n\r\nconst Star = ({selected=false, onClick=f=>f}) => {\r\n\t\treturn(\r\n\t\t\t<div className={(selected)? \"star selected\": \"star\"} onClick={onClick}></div>\r\n\t\t)\r\n}\r\n\r\nStar.propTypes = {\r\n\tselected: PropTypes.bool,\r\n\tonClick: PropTypes.func\r\n}\r\n\r\nexport default Star","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport Star from \"./star\"\r\n\r\nconst StarRating = ({starsSelected = 0, totalStars = 5, onRate=f=>f}) => {\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\t[...Array(totalStars)].map((item, index) => \r\n\t\t\t\t\t\t<Star key={index} \r\n\t\t\t\t\t\tselected={index < starsSelected} \r\n\t\t\t\t\t\tonClick={()=> onRate(index + 1)} />\r\n\t\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t<p> {starsSelected} of { totalStars } </p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\nStarRating.propTypes = {\r\n\ttotalStars: PropTypes.number\r\n}\r\n\r\nStarRating.defaultProps = {\r\n\ttotalStars: 5\r\n}\r\n\r\nexport default StarRating","import React from 'react'\r\nimport StarRating from '../Star/starRating'\r\nimport './color.css'\r\n\r\nconst Color = ({title, color, rating=0, onRemove=f=>f, onRate=f=>f}) => {\r\n\treturn(\r\n\t\t<div className=\"color-container\">\r\n\t\t\t<button id=\"close\" onClick={onRemove}>X</button>\r\n\t\t\t<div className=\"color-name\">\r\n\t\t\t\t{title}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"color\" style={{backgroundColor: color}}></div>\r\n\t\t\t<div className=\"star-rating\">\r\n\t\t\t\t<StarRating starsSelected={rating} onRate={onRate} />\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Color;","import React from 'react'\r\nimport Color from './color'\r\n\r\nconst ColorList = ({ colors=[], onRate=f=>f, onRemove=f=>f}) =>\r\n    <div className=\"col-md-12\">\r\n        {(colors.length === 0) ?\r\n        \t<p>No Colors Listed. (Add a Color)</p>:            \r\n        \tcolors.map(color => \r\n        \t<Color \r\n        \t\tkey={color.id} \r\n        \t\t{...color} \r\n        \t\tonRate={(rating) => onRate(color.id, rating)} \r\n        \t\tonRemove={() => onRemove(color.id)} \r\n        \t/>)}\r\n    </div>\r\n\r\nexport default ColorList;","import React, {Component} from 'react';\nimport './App.css';\nimport AddColorForm from './Components/addColorFrom'\nimport ColorList from './Components/color/colorList'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      colors: []\n    }\n    this.addColor = this.addColor.bind(this);\n  }\n\n  addColor(title, color){\n    const colors = [\n      ...this.state.colors,\n      {\n        id: this.pRG(),\n        title,\n        color,\n        rating: 0\n      }\n    ]\n    this.setState({colors})\n  }\n\n  //Pseudo random generator for ids\n  pRG = () => 1 + (100-1)*Math.random();\n\n  //Add a Color rating to the color object in the array\n  rateColor = (id, rating) => {\n    const colors = this.state.colors.map(color => \n      (color.id !== id)?\n      color: \n      {...color, rating}\n      )\n    this.setState({colors})\n  }\n\n  //Remove a color from the Array\n  removeColor = (id) => {\n    const colors = this.state.colors.filter(\n            color => color.id !== id\n        )\n        this.setState({colors})\n    }\n  \n\n  render(){\n    const {colors} = this.state\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-2\">\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"card  border-0 my-1\">\n              <div className=\"card-body border-0 bg-dark d-inline rounded-pill text-white text-center\">\n                Color Organizer App\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-2\"></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8\">\n            <div className=\"card shadow  my-2\">\n                <div className=\"card-header\">Manage Your Colors</div>\n                <div className=\"card-body border-0 \">\n                  <AddColorForm onNewColor = {this.addColor}/>\n                  <div className=\"row\">\n                    <ColorList colors={colors} onRate={this.rateColor} onRemove={this.removeColor}/>\n                  </div>\n                </div>\n            </div>\n          </div>\n          <div className=\"col-md-2\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}